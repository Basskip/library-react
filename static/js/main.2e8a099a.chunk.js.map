{"version":3,"sources":["components/Book.js","components/BookRow.js","components/Table.js","components/BookForm.js","components/Library.js","App.js","serviceWorker.js","index.js"],"names":["Book","obj","this","title","author","pages","read","readString","BookRow","props","book","onClick","onToggle","onDelete","React","Component","Table","bookList","books","map","index","key","handleDelete","handleToggle","className","BookForm","state","handleChange","bind","handleSubmit","event","target","value","type","checked","name","setState","preventDefault","bookSubmitted","onSubmit","htmlFor","onChange","Library","addBook","currentBooks","concat","splice","toggleRead","saveLibrary","localStorage","library","JSON","stringify","items","getItem","parseLibrary","parse","json","length","push","loadLibrary","window","addEventListener","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e8a099a.chunk.js","sourcesContent":["export default class Book {\n    constructor(obj) {\n        this.title = obj.title;\n        this.author = obj.author;\n        this.pages = obj.pages;\n        this.read = obj.read;\n    }\n\n    info() {\n        return this.title + \" by \" + this.author + \", \" + this.pages + \" pages, \" + this.readString()\n    }\n\n    readString() {\n        if (this.read) {\n            return \"read\"\n        } else {\n            return \"not yet read\"\n        }\n    }\n\n    toggleRead() {\n        this.read = !this.read;\n    }\n}","import React from 'react';\n\nexport default class BookRow extends React.Component {\n    render() {\n        return (\n            <tr>\n                <td>{this.props.book.title}</td>\n                <td>{this.props.book.author}</td>\n                <td>{this.props.book.pages} pages</td>\n                <td>{this.props.book.readString()}</td>\n                <td>\n                    <button onClick={this.props.onToggle}>Toggle</button>\n                </td>\n                <td>\n                    <button onClick={this.props.onDelete}>Delete</button>\n                </td>\n            </tr>\n        )\n    }\n}","import React from 'react';\nimport BookRow from './BookRow';\n\nclass Table extends React.Component {\n\n    render() {\n        const bookList = this.props.books.map((book, index) =>\n            <BookRow book={book} key={index} onDelete={() => this.props.handleDelete(index)} onToggle={() => this.props.handleToggle(index)}  />);\n        return (\n            <table className=\"table\">\n                <caption>My Library</caption>\n                <thead>\n                    <tr>\n                        <td>Title</td>\n                        <td>Author</td>\n                        <td>Pages</td>\n                        <td>Read</td>\n                        <td>Status</td>\n                        <td>Delete</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {bookList}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default Table;","import React from 'react';\n\nexport default class BookForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            author: '',\n            pages: 0,\n            read: false,\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.props.bookSubmitted(this.state);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"title\">Title</label>\n                    <input className=\"form-control\" type=\"text\" name=\"title\" value={this.state.title} onChange={this.handleChange} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"text\">Author</label>\n                    <input className=\"form-control\" type=\"text\" name=\"author\" value={this.state.author} onChange={this.handleChange} />\n                </div>\n                <div className=\"form-group\">\n                    <label>Pages</label>\n                    <input className=\"form-control\" type=\"number\" name=\"pages\" value={this.state.pages} onChange={this.handleChange} />\n                </div>\n                <div className=\"form-check\">\n                    <input className=\"form-check-input\" type=\"checkbox\" name=\"read\" checked={this.state.read} onChange={this.handleChange} />\n                    <label className=\"form-check-label\">Read</label>\n                </div>\n                <input className=\"btn btn-primary\" type=\"submit\" value=\"Add Book\" ></input>\n            </form>\n        )\n    }\n}","import React from 'react';\nimport Book from './Book';\nimport Table from './Table';\nimport BookForm from './BookForm';\n\nexport default class Library extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            books: [],\n        }\n\n        this.saveLibrary = this.saveLibrary.bind(this);\n    }\n\n    addBook = (book) => {\n        const currentBooks = this.state.books;\n        this.setState({\n            books: currentBooks.concat([new Book(book)]),\n        })\n    }\n\n    handleDelete = (index) => {\n        const currentBooks = this.state.books;\n        currentBooks.splice(index, 1);\n        this.setState({\n            books: currentBooks,\n        });\n    }\n\n    handleToggle = (index) => {\n\n        const currentBooks = this.state.books;\n        currentBooks[index].toggleRead();\n\n        this.setState({\n            books: currentBooks,\n        })\n    }\n\n    saveLibrary() {\n        localStorage.library = JSON.stringify(this.state.books);\n    }\n\n    loadLibrary() {\n        let items = localStorage.getItem('library');\n        if (items) {\n            this.setState({\n                books: this.parseLibrary(JSON.parse(items)),\n            })\n        }\n    }\n\n    parseLibrary(json) {\n        let books = [];\n\n        for (let index = 0; index < json.length; index++) {\n            const book = json[index];\n            books.push(new Book(book));\n        }\n        return books;\n    }\n\n    componentDidMount() {\n        this.loadLibrary();\n\n        window.addEventListener(\"beforeunload\", this.saveLibrary);\n    }\n\n    componentWillUnmount() {\n        this.saveLibrary();\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <Table books={this.state.books} handleDelete={this.handleDelete} handleToggle={this.handleToggle}></Table>\n                <BookForm bookSubmitted={this.addBook} ></BookForm>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Library from './components/Library';\n\nfunction App() {\n  return (\n    <Library></Library>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}